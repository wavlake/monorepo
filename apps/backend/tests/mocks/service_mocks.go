// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/wavlake/monorepo/internal/models"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// GetFirebaseUIDByPubkey mocks base method.
func (m *MockUserServiceInterface) GetFirebaseUIDByPubkey(ctx context.Context, pubkey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirebaseUIDByPubkey", ctx, pubkey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirebaseUIDByPubkey indicates an expected call of GetFirebaseUIDByPubkey.
func (mr *MockUserServiceInterfaceMockRecorder) GetFirebaseUIDByPubkey(ctx, pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirebaseUIDByPubkey", reflect.TypeOf((*MockUserServiceInterface)(nil).GetFirebaseUIDByPubkey), ctx, pubkey)
}

// GetLinkedPubkeys mocks base method.
func (m *MockUserServiceInterface) GetLinkedPubkeys(ctx context.Context, firebaseUID string) ([]models.NostrAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedPubkeys", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.NostrAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedPubkeys indicates an expected call of GetLinkedPubkeys.
func (mr *MockUserServiceInterfaceMockRecorder) GetLinkedPubkeys(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedPubkeys", reflect.TypeOf((*MockUserServiceInterface)(nil).GetLinkedPubkeys), ctx, firebaseUID)
}

// GetUserEmail mocks base method.
func (m *MockUserServiceInterface) GetUserEmail(ctx context.Context, firebaseUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx, firebaseUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserEmail(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserEmail), ctx, firebaseUID)
}

// LinkPubkeyToUser mocks base method.
func (m *MockUserServiceInterface) LinkPubkeyToUser(ctx context.Context, pubkey, firebaseUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkPubkeyToUser", ctx, pubkey, firebaseUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkPubkeyToUser indicates an expected call of LinkPubkeyToUser.
func (mr *MockUserServiceInterfaceMockRecorder) LinkPubkeyToUser(ctx, pubkey, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPubkeyToUser", reflect.TypeOf((*MockUserServiceInterface)(nil).LinkPubkeyToUser), ctx, pubkey, firebaseUID)
}

// UnlinkPubkeyFromUser mocks base method.
func (m *MockUserServiceInterface) UnlinkPubkeyFromUser(ctx context.Context, pubkey, firebaseUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkPubkeyFromUser", ctx, pubkey, firebaseUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkPubkeyFromUser indicates an expected call of UnlinkPubkeyFromUser.
func (mr *MockUserServiceInterfaceMockRecorder) UnlinkPubkeyFromUser(ctx, pubkey, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkPubkeyFromUser", reflect.TypeOf((*MockUserServiceInterface)(nil).UnlinkPubkeyFromUser), ctx, pubkey, firebaseUID)
}

// MockPostgresServiceInterface is a mock of PostgresServiceInterface interface.
type MockPostgresServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresServiceInterfaceMockRecorder
}

// MockPostgresServiceInterfaceMockRecorder is the mock recorder for MockPostgresServiceInterface.
type MockPostgresServiceInterfaceMockRecorder struct {
	mock *MockPostgresServiceInterface
}

// NewMockPostgresServiceInterface creates a new mock instance.
func NewMockPostgresServiceInterface(ctrl *gomock.Controller) *MockPostgresServiceInterface {
	mock := &MockPostgresServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPostgresServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresServiceInterface) EXPECT() *MockPostgresServiceInterfaceMockRecorder {
	return m.recorder
}

// GetTracksByAlbum mocks base method.
func (m *MockPostgresServiceInterface) GetTracksByAlbum(ctx context.Context, albumID string) ([]models.LegacyTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByAlbum", ctx, albumID)
	ret0, _ := ret[0].([]models.LegacyTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByAlbum indicates an expected call of GetTracksByAlbum.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetTracksByAlbum(ctx, albumID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByAlbum", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetTracksByAlbum), ctx, albumID)
}

// GetTracksByArtist mocks base method.
func (m *MockPostgresServiceInterface) GetTracksByArtist(ctx context.Context, artistID string) ([]models.LegacyTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByArtist", ctx, artistID)
	ret0, _ := ret[0].([]models.LegacyTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByArtist indicates an expected call of GetTracksByArtist.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetTracksByArtist(ctx, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByArtist", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetTracksByArtist), ctx, artistID)
}

// GetUserAlbums mocks base method.
func (m *MockPostgresServiceInterface) GetUserAlbums(ctx context.Context, firebaseUID string) ([]models.LegacyAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAlbums", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.LegacyAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAlbums indicates an expected call of GetUserAlbums.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserAlbums(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAlbums", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserAlbums), ctx, firebaseUID)
}

// GetUserArtists mocks base method.
func (m *MockPostgresServiceInterface) GetUserArtists(ctx context.Context, firebaseUID string) ([]models.LegacyArtist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserArtists", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.LegacyArtist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserArtists indicates an expected call of GetUserArtists.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserArtists(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserArtists", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserArtists), ctx, firebaseUID)
}

// GetUserByFirebaseUID mocks base method.
func (m *MockPostgresServiceInterface) GetUserByFirebaseUID(ctx context.Context, firebaseUID string) (*models.LegacyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByFirebaseUID", ctx, firebaseUID)
	ret0, _ := ret[0].(*models.LegacyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByFirebaseUID indicates an expected call of GetUserByFirebaseUID.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserByFirebaseUID(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByFirebaseUID", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserByFirebaseUID), ctx, firebaseUID)
}

// GetUserTracks mocks base method.
func (m *MockPostgresServiceInterface) GetUserTracks(ctx context.Context, firebaseUID string) ([]models.LegacyTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTracks", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.LegacyTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTracks indicates an expected call of GetUserTracks.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserTracks(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTracks", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserTracks), ctx, firebaseUID)
}

// MockStorageServiceInterface is a mock of StorageServiceInterface interface.
type MockStorageServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceInterfaceMockRecorder
}

// MockStorageServiceInterfaceMockRecorder is the mock recorder for MockStorageServiceInterface.
type MockStorageServiceInterfaceMockRecorder struct {
	mock *MockStorageServiceInterface
}

// NewMockStorageServiceInterface creates a new mock instance.
func NewMockStorageServiceInterface(ctrl *gomock.Controller) *MockStorageServiceInterface {
	mock := &MockStorageServiceInterface{ctrl: ctrl}
	mock.recorder = &MockStorageServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceInterface) EXPECT() *MockStorageServiceInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageServiceInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageServiceInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageServiceInterface)(nil).Close))
}

// CopyObject mocks base method.
func (m *MockStorageServiceInterface) CopyObject(ctx context.Context, srcObject, dstObject string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObject", ctx, srcObject, dstObject)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockStorageServiceInterfaceMockRecorder) CopyObject(ctx, srcObject, dstObject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockStorageServiceInterface)(nil).CopyObject), ctx, srcObject, dstObject)
}

// DeleteObject mocks base method.
func (m *MockStorageServiceInterface) DeleteObject(ctx context.Context, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockStorageServiceInterfaceMockRecorder) DeleteObject(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorageServiceInterface)(nil).DeleteObject), ctx, objectName)
}

// GeneratePresignedURL mocks base method.
func (m *MockStorageServiceInterface) GeneratePresignedURL(ctx context.Context, objectName string, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedURL", ctx, objectName, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedURL indicates an expected call of GeneratePresignedURL.
func (mr *MockStorageServiceInterfaceMockRecorder) GeneratePresignedURL(ctx, objectName, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedURL", reflect.TypeOf((*MockStorageServiceInterface)(nil).GeneratePresignedURL), ctx, objectName, expiration)
}

// GetBucketName mocks base method.
func (m *MockStorageServiceInterface) GetBucketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBucketName indicates an expected call of GetBucketName.
func (mr *MockStorageServiceInterfaceMockRecorder) GetBucketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketName", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetBucketName))
}

// GetObjectMetadata mocks base method.
func (m *MockStorageServiceInterface) GetObjectMetadata(ctx context.Context, objectName string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectMetadata", ctx, objectName)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectMetadata indicates an expected call of GetObjectMetadata.
func (mr *MockStorageServiceInterfaceMockRecorder) GetObjectMetadata(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectMetadata", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetObjectMetadata), ctx, objectName)
}

// GetObjectReader mocks base method.
func (m *MockStorageServiceInterface) GetObjectReader(ctx context.Context, objectName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectReader", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectReader indicates an expected call of GetObjectReader.
func (mr *MockStorageServiceInterfaceMockRecorder) GetObjectReader(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectReader", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetObjectReader), ctx, objectName)
}

// GetPublicURL mocks base method.
func (m *MockStorageServiceInterface) GetPublicURL(objectName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicURL", objectName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicURL indicates an expected call of GetPublicURL.
func (mr *MockStorageServiceInterfaceMockRecorder) GetPublicURL(objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicURL", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetPublicURL), objectName)
}

// UploadObject mocks base method.
func (m *MockStorageServiceInterface) UploadObject(ctx context.Context, objectName string, data io.Reader, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadObject", ctx, objectName, data, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadObject indicates an expected call of UploadObject.
func (mr *MockStorageServiceInterfaceMockRecorder) UploadObject(ctx, objectName, data, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadObject", reflect.TypeOf((*MockStorageServiceInterface)(nil).UploadObject), ctx, objectName, data, contentType)
}

// MockNostrTrackServiceInterface is a mock of NostrTrackServiceInterface interface.
type MockNostrTrackServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNostrTrackServiceInterfaceMockRecorder
}

// MockNostrTrackServiceInterfaceMockRecorder is the mock recorder for MockNostrTrackServiceInterface.
type MockNostrTrackServiceInterfaceMockRecorder struct {
	mock *MockNostrTrackServiceInterface
}

// NewMockNostrTrackServiceInterface creates a new mock instance.
func NewMockNostrTrackServiceInterface(ctrl *gomock.Controller) *MockNostrTrackServiceInterface {
	mock := &MockNostrTrackServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNostrTrackServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNostrTrackServiceInterface) EXPECT() *MockNostrTrackServiceInterfaceMockRecorder {
	return m.recorder
}

// AddCompressionVersion mocks base method.
func (m *MockNostrTrackServiceInterface) AddCompressionVersion(ctx context.Context, trackID string, version models.CompressionVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompressionVersion", ctx, trackID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCompressionVersion indicates an expected call of AddCompressionVersion.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) AddCompressionVersion(ctx, trackID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompressionVersion", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).AddCompressionVersion), ctx, trackID, version)
}

// CreateTrack mocks base method.
func (m *MockNostrTrackServiceInterface) CreateTrack(ctx context.Context, pubkey, firebaseUID, extension string) (*models.NostrTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrack", ctx, pubkey, firebaseUID, extension)
	ret0, _ := ret[0].(*models.NostrTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrack indicates an expected call of CreateTrack.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) CreateTrack(ctx, pubkey, firebaseUID, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrack", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).CreateTrack), ctx, pubkey, firebaseUID, extension)
}

// DeleteTrack mocks base method.
func (m *MockNostrTrackServiceInterface) DeleteTrack(ctx context.Context, trackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrack", ctx, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrack indicates an expected call of DeleteTrack.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) DeleteTrack(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrack", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).DeleteTrack), ctx, trackID)
}

// GetTrack mocks base method.
func (m *MockNostrTrackServiceInterface) GetTrack(ctx context.Context, trackID string) (*models.NostrTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrack", ctx, trackID)
	ret0, _ := ret[0].(*models.NostrTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrack indicates an expected call of GetTrack.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) GetTrack(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrack", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).GetTrack), ctx, trackID)
}

// GetTracksByFirebaseUID mocks base method.
func (m *MockNostrTrackServiceInterface) GetTracksByFirebaseUID(ctx context.Context, firebaseUID string) ([]*models.NostrTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByFirebaseUID", ctx, firebaseUID)
	ret0, _ := ret[0].([]*models.NostrTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByFirebaseUID indicates an expected call of GetTracksByFirebaseUID.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) GetTracksByFirebaseUID(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByFirebaseUID", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).GetTracksByFirebaseUID), ctx, firebaseUID)
}

// GetTracksByPubkey mocks base method.
func (m *MockNostrTrackServiceInterface) GetTracksByPubkey(ctx context.Context, pubkey string) ([]*models.NostrTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByPubkey", ctx, pubkey)
	ret0, _ := ret[0].([]*models.NostrTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByPubkey indicates an expected call of GetTracksByPubkey.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) GetTracksByPubkey(ctx, pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByPubkey", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).GetTracksByPubkey), ctx, pubkey)
}

// HardDeleteTrack mocks base method.
func (m *MockNostrTrackServiceInterface) HardDeleteTrack(ctx context.Context, trackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteTrack", ctx, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteTrack indicates an expected call of HardDeleteTrack.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) HardDeleteTrack(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteTrack", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).HardDeleteTrack), ctx, trackID)
}

// MarkTrackAsCompressed mocks base method.
func (m *MockNostrTrackServiceInterface) MarkTrackAsCompressed(ctx context.Context, trackID, compressedURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTrackAsCompressed", ctx, trackID, compressedURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTrackAsCompressed indicates an expected call of MarkTrackAsCompressed.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) MarkTrackAsCompressed(ctx, trackID, compressedURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTrackAsCompressed", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).MarkTrackAsCompressed), ctx, trackID, compressedURL)
}

// MarkTrackAsProcessed mocks base method.
func (m *MockNostrTrackServiceInterface) MarkTrackAsProcessed(ctx context.Context, trackID string, size int64, duration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTrackAsProcessed", ctx, trackID, size, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTrackAsProcessed indicates an expected call of MarkTrackAsProcessed.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) MarkTrackAsProcessed(ctx, trackID, size, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTrackAsProcessed", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).MarkTrackAsProcessed), ctx, trackID, size, duration)
}

// SetPendingCompression mocks base method.
func (m *MockNostrTrackServiceInterface) SetPendingCompression(ctx context.Context, trackID string, pending bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingCompression", ctx, trackID, pending)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingCompression indicates an expected call of SetPendingCompression.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) SetPendingCompression(ctx, trackID, pending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingCompression", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).SetPendingCompression), ctx, trackID, pending)
}

// UpdateCompressionVisibility mocks base method.
func (m *MockNostrTrackServiceInterface) UpdateCompressionVisibility(ctx context.Context, trackID string, updates []models.VersionUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompressionVisibility", ctx, trackID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompressionVisibility indicates an expected call of UpdateCompressionVisibility.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) UpdateCompressionVisibility(ctx, trackID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompressionVisibility", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).UpdateCompressionVisibility), ctx, trackID, updates)
}

// UpdateTrack mocks base method.
func (m *MockNostrTrackServiceInterface) UpdateTrack(ctx context.Context, trackID string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrack", ctx, trackID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrack indicates an expected call of UpdateTrack.
func (mr *MockNostrTrackServiceInterfaceMockRecorder) UpdateTrack(ctx, trackID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrack", reflect.TypeOf((*MockNostrTrackServiceInterface)(nil).UpdateTrack), ctx, trackID, updates)
}

// MockProcessingServiceInterface is a mock of ProcessingServiceInterface interface.
type MockProcessingServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingServiceInterfaceMockRecorder
}

// MockProcessingServiceInterfaceMockRecorder is the mock recorder for MockProcessingServiceInterface.
type MockProcessingServiceInterfaceMockRecorder struct {
	mock *MockProcessingServiceInterface
}

// NewMockProcessingServiceInterface creates a new mock instance.
func NewMockProcessingServiceInterface(ctrl *gomock.Controller) *MockProcessingServiceInterface {
	mock := &MockProcessingServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProcessingServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingServiceInterface) EXPECT() *MockProcessingServiceInterfaceMockRecorder {
	return m.recorder
}

// ProcessCompression mocks base method.
func (m *MockProcessingServiceInterface) ProcessCompression(ctx context.Context, trackID string, option models.CompressionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessCompression", ctx, trackID, option)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessCompression indicates an expected call of ProcessCompression.
func (mr *MockProcessingServiceInterfaceMockRecorder) ProcessCompression(ctx, trackID, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCompression", reflect.TypeOf((*MockProcessingServiceInterface)(nil).ProcessCompression), ctx, trackID, option)
}

// ProcessCompressionAsync mocks base method.
func (m *MockProcessingServiceInterface) ProcessCompressionAsync(ctx context.Context, trackID string, option models.CompressionOption) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessCompressionAsync", ctx, trackID, option)
}

// ProcessCompressionAsync indicates an expected call of ProcessCompressionAsync.
func (mr *MockProcessingServiceInterfaceMockRecorder) ProcessCompressionAsync(ctx, trackID, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCompressionAsync", reflect.TypeOf((*MockProcessingServiceInterface)(nil).ProcessCompressionAsync), ctx, trackID, option)
}

// ProcessTrack mocks base method.
func (m *MockProcessingServiceInterface) ProcessTrack(ctx context.Context, trackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTrack", ctx, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTrack indicates an expected call of ProcessTrack.
func (mr *MockProcessingServiceInterfaceMockRecorder) ProcessTrack(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTrack", reflect.TypeOf((*MockProcessingServiceInterface)(nil).ProcessTrack), ctx, trackID)
}

// ProcessTrackAsync mocks base method.
func (m *MockProcessingServiceInterface) ProcessTrackAsync(ctx context.Context, trackID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessTrackAsync", ctx, trackID)
}

// ProcessTrackAsync indicates an expected call of ProcessTrackAsync.
func (mr *MockProcessingServiceInterfaceMockRecorder) ProcessTrackAsync(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTrackAsync", reflect.TypeOf((*MockProcessingServiceInterface)(nil).ProcessTrackAsync), ctx, trackID)
}

// RequestCompressionVersions mocks base method.
func (m *MockProcessingServiceInterface) RequestCompressionVersions(ctx context.Context, trackID string, compressionOptions []models.CompressionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCompressionVersions", ctx, trackID, compressionOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestCompressionVersions indicates an expected call of RequestCompressionVersions.
func (mr *MockProcessingServiceInterfaceMockRecorder) RequestCompressionVersions(ctx, trackID, compressionOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCompressionVersions", reflect.TypeOf((*MockProcessingServiceInterface)(nil).RequestCompressionVersions), ctx, trackID, compressionOptions)
}

// MockAudioProcessorInterface is a mock of AudioProcessorInterface interface.
type MockAudioProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAudioProcessorInterfaceMockRecorder
}

// MockAudioProcessorInterfaceMockRecorder is the mock recorder for MockAudioProcessorInterface.
type MockAudioProcessorInterfaceMockRecorder struct {
	mock *MockAudioProcessorInterface
}

// NewMockAudioProcessorInterface creates a new mock instance.
func NewMockAudioProcessorInterface(ctrl *gomock.Controller) *MockAudioProcessorInterface {
	mock := &MockAudioProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockAudioProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAudioProcessorInterface) EXPECT() *MockAudioProcessorInterfaceMockRecorder {
	return m.recorder
}

// CompressAudio mocks base method.
func (m *MockAudioProcessorInterface) CompressAudio(ctx context.Context, inputPath, outputPath string, options models.CompressionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressAudio", ctx, inputPath, outputPath, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompressAudio indicates an expected call of CompressAudio.
func (mr *MockAudioProcessorInterfaceMockRecorder) CompressAudio(ctx, inputPath, outputPath, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressAudio", reflect.TypeOf((*MockAudioProcessorInterface)(nil).CompressAudio), ctx, inputPath, outputPath, options)
}

// ExtractMetadata mocks base method.
func (m *MockAudioProcessorInterface) ExtractMetadata(ctx context.Context, filePath string) (*models.AudioMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractMetadata", ctx, filePath)
	ret0, _ := ret[0].(*models.AudioMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractMetadata indicates an expected call of ExtractMetadata.
func (mr *MockAudioProcessorInterfaceMockRecorder) ExtractMetadata(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractMetadata", reflect.TypeOf((*MockAudioProcessorInterface)(nil).ExtractMetadata), ctx, filePath)
}

// IsFormatSupported mocks base method.
func (m *MockAudioProcessorInterface) IsFormatSupported(extension string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFormatSupported", extension)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFormatSupported indicates an expected call of IsFormatSupported.
func (mr *MockAudioProcessorInterfaceMockRecorder) IsFormatSupported(extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFormatSupported", reflect.TypeOf((*MockAudioProcessorInterface)(nil).IsFormatSupported), extension)
}

// ValidateAudioFile mocks base method.
func (m *MockAudioProcessorInterface) ValidateAudioFile(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAudioFile", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAudioFile indicates an expected call of ValidateAudioFile.
func (mr *MockAudioProcessorInterfaceMockRecorder) ValidateAudioFile(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAudioFile", reflect.TypeOf((*MockAudioProcessorInterface)(nil).ValidateAudioFile), ctx, filePath)
}

// MockStoragePathConfigInterface is a mock of StoragePathConfigInterface interface.
type MockStoragePathConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePathConfigInterfaceMockRecorder
}

// MockStoragePathConfigInterfaceMockRecorder is the mock recorder for MockStoragePathConfigInterface.
type MockStoragePathConfigInterfaceMockRecorder struct {
	mock *MockStoragePathConfigInterface
}

// NewMockStoragePathConfigInterface creates a new mock instance.
func NewMockStoragePathConfigInterface(ctrl *gomock.Controller) *MockStoragePathConfigInterface {
	mock := &MockStoragePathConfigInterface{ctrl: ctrl}
	mock.recorder = &MockStoragePathConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePathConfigInterface) EXPECT() *MockStoragePathConfigInterfaceMockRecorder {
	return m.recorder
}

// GetCompressedPath mocks base method.
func (m *MockStoragePathConfigInterface) GetCompressedPath(trackID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompressedPath", trackID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCompressedPath indicates an expected call of GetCompressedPath.
func (mr *MockStoragePathConfigInterfaceMockRecorder) GetCompressedPath(trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompressedPath", reflect.TypeOf((*MockStoragePathConfigInterface)(nil).GetCompressedPath), trackID)
}

// GetOriginalPath mocks base method.
func (m *MockStoragePathConfigInterface) GetOriginalPath(trackID, extension string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalPath", trackID, extension)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOriginalPath indicates an expected call of GetOriginalPath.
func (mr *MockStoragePathConfigInterfaceMockRecorder) GetOriginalPath(trackID, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalPath", reflect.TypeOf((*MockStoragePathConfigInterface)(nil).GetOriginalPath), trackID, extension)
}

// MockCompressionServiceInterface is a mock of CompressionServiceInterface interface.
type MockCompressionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCompressionServiceInterfaceMockRecorder
}

// MockCompressionServiceInterfaceMockRecorder is the mock recorder for MockCompressionServiceInterface.
type MockCompressionServiceInterfaceMockRecorder struct {
	mock *MockCompressionServiceInterface
}

// NewMockCompressionServiceInterface creates a new mock instance.
func NewMockCompressionServiceInterface(ctrl *gomock.Controller) *MockCompressionServiceInterface {
	mock := &MockCompressionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCompressionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompressionServiceInterface) EXPECT() *MockCompressionServiceInterfaceMockRecorder {
	return m.recorder
}

// AddCompressionVersion mocks base method.
func (m *MockCompressionServiceInterface) AddCompressionVersion(ctx context.Context, trackID string, version models.CompressionVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompressionVersion", ctx, trackID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCompressionVersion indicates an expected call of AddCompressionVersion.
func (mr *MockCompressionServiceInterfaceMockRecorder) AddCompressionVersion(ctx, trackID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompressionVersion", reflect.TypeOf((*MockCompressionServiceInterface)(nil).AddCompressionVersion), ctx, trackID, version)
}

// DeleteCompressionVersion mocks base method.
func (m *MockCompressionServiceInterface) DeleteCompressionVersion(ctx context.Context, trackID, versionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompressionVersion", ctx, trackID, versionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompressionVersion indicates an expected call of DeleteCompressionVersion.
func (mr *MockCompressionServiceInterfaceMockRecorder) DeleteCompressionVersion(ctx, trackID, versionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompressionVersion", reflect.TypeOf((*MockCompressionServiceInterface)(nil).DeleteCompressionVersion), ctx, trackID, versionID)
}

// GetCompressionStatus mocks base method.
func (m *MockCompressionServiceInterface) GetCompressionStatus(ctx context.Context, trackID string) (*models.ProcessingStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompressionStatus", ctx, trackID)
	ret0, _ := ret[0].(*models.ProcessingStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompressionStatus indicates an expected call of GetCompressionStatus.
func (mr *MockCompressionServiceInterfaceMockRecorder) GetCompressionStatus(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompressionStatus", reflect.TypeOf((*MockCompressionServiceInterface)(nil).GetCompressionStatus), ctx, trackID)
}

// GetPublicVersions mocks base method.
func (m *MockCompressionServiceInterface) GetPublicVersions(ctx context.Context, trackID string) ([]models.CompressionVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicVersions", ctx, trackID)
	ret0, _ := ret[0].([]models.CompressionVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicVersions indicates an expected call of GetPublicVersions.
func (mr *MockCompressionServiceInterfaceMockRecorder) GetPublicVersions(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicVersions", reflect.TypeOf((*MockCompressionServiceInterface)(nil).GetPublicVersions), ctx, trackID)
}

// RequestCompression mocks base method.
func (m *MockCompressionServiceInterface) RequestCompression(ctx context.Context, trackID string, options []models.CompressionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCompression", ctx, trackID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestCompression indicates an expected call of RequestCompression.
func (mr *MockCompressionServiceInterfaceMockRecorder) RequestCompression(ctx, trackID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCompression", reflect.TypeOf((*MockCompressionServiceInterface)(nil).RequestCompression), ctx, trackID, options)
}

// UpdateVersionVisibility mocks base method.
func (m *MockCompressionServiceInterface) UpdateVersionVisibility(ctx context.Context, trackID, versionID string, isPublic bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersionVisibility", ctx, trackID, versionID, isPublic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVersionVisibility indicates an expected call of UpdateVersionVisibility.
func (mr *MockCompressionServiceInterfaceMockRecorder) UpdateVersionVisibility(ctx, trackID, versionID, isPublic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersionVisibility", reflect.TypeOf((*MockCompressionServiceInterface)(nil).UpdateVersionVisibility), ctx, trackID, versionID, isPublic)
}

// MockFileServerServiceInterface is a mock of FileServerServiceInterface interface.
type MockFileServerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFileServerServiceInterfaceMockRecorder
}

// MockFileServerServiceInterfaceMockRecorder is the mock recorder for MockFileServerServiceInterface.
type MockFileServerServiceInterfaceMockRecorder struct {
	mock *MockFileServerServiceInterface
}

// NewMockFileServerServiceInterface creates a new mock instance.
func NewMockFileServerServiceInterface(ctrl *gomock.Controller) *MockFileServerServiceInterface {
	mock := &MockFileServerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFileServerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServerServiceInterface) EXPECT() *MockFileServerServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileServerServiceInterface) DeleteFile(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServerServiceInterfaceMockRecorder) DeleteFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileServerServiceInterface)(nil).DeleteFile), ctx, path)
}

// DownloadFile mocks base method.
func (m *MockFileServerServiceInterface) DownloadFile(ctx context.Context, path string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileServerServiceInterfaceMockRecorder) DownloadFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileServerServiceInterface)(nil).DownloadFile), ctx, path)
}

// GenerateUploadToken mocks base method.
func (m *MockFileServerServiceInterface) GenerateUploadToken(ctx context.Context, path, userID string, expiration time.Duration) (*models.FileUploadToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUploadToken", ctx, path, userID, expiration)
	ret0, _ := ret[0].(*models.FileUploadToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUploadToken indicates an expected call of GenerateUploadToken.
func (mr *MockFileServerServiceInterfaceMockRecorder) GenerateUploadToken(ctx, path, userID, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUploadToken", reflect.TypeOf((*MockFileServerServiceInterface)(nil).GenerateUploadToken), ctx, path, userID, expiration)
}

// GetFileMetadata mocks base method.
func (m *MockFileServerServiceInterface) GetFileMetadata(ctx context.Context, path string) (*models.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetadata", ctx, path)
	ret0, _ := ret[0].(*models.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetadata indicates an expected call of GetFileMetadata.
func (mr *MockFileServerServiceInterfaceMockRecorder) GetFileMetadata(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetadata", reflect.TypeOf((*MockFileServerServiceInterface)(nil).GetFileMetadata), ctx, path)
}

// ListFiles mocks base method.
func (m *MockFileServerServiceInterface) ListFiles(ctx context.Context, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFileServerServiceInterfaceMockRecorder) ListFiles(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileServerServiceInterface)(nil).ListFiles), ctx, prefix)
}

// UploadFile mocks base method.
func (m *MockFileServerServiceInterface) UploadFile(ctx context.Context, path string, data io.Reader, contentType string) (*models.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, path, data, contentType)
	ret0, _ := ret[0].(*models.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServerServiceInterfaceMockRecorder) UploadFile(ctx, path, data, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileServerServiceInterface)(nil).UploadFile), ctx, path, data, contentType)
}

// MockMockStorageServiceInterface is a mock of MockStorageServiceInterface interface.
type MockMockStorageServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMockStorageServiceInterfaceMockRecorder
}

// MockMockStorageServiceInterfaceMockRecorder is the mock recorder for MockMockStorageServiceInterface.
type MockMockStorageServiceInterfaceMockRecorder struct {
	mock *MockMockStorageServiceInterface
}

// NewMockMockStorageServiceInterface creates a new mock instance.
func NewMockMockStorageServiceInterface(ctrl *gomock.Controller) *MockMockStorageServiceInterface {
	mock := &MockMockStorageServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMockStorageServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockStorageServiceInterface) EXPECT() *MockMockStorageServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method.
func (m *MockMockStorageServiceInterface) CreateBucket(ctx context.Context, bucket, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", ctx, bucket, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockMockStorageServiceInterfaceMockRecorder) CreateBucket(ctx, bucket, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).CreateBucket), ctx, bucket, location)
}

// DeleteFile mocks base method.
func (m *MockMockStorageServiceInterface) DeleteFile(ctx context.Context, bucket, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, bucket, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockMockStorageServiceInterfaceMockRecorder) DeleteFile(ctx, bucket, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).DeleteFile), ctx, bucket, path)
}

// DownloadFile mocks base method.
func (m *MockMockStorageServiceInterface) DownloadFile(ctx context.Context, bucket, path string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, bucket, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockMockStorageServiceInterfaceMockRecorder) DownloadFile(ctx, bucket, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).DownloadFile), ctx, bucket, path)
}

// GetBucketInfo mocks base method.
func (m *MockMockStorageServiceInterface) GetBucketInfo(ctx context.Context, bucket string) (*models.BucketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketInfo", ctx, bucket)
	ret0, _ := ret[0].(*models.BucketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketInfo indicates an expected call of GetBucketInfo.
func (mr *MockMockStorageServiceInterfaceMockRecorder) GetBucketInfo(ctx, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketInfo", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).GetBucketInfo), ctx, bucket)
}

// HealthCheck mocks base method.
func (m *MockMockStorageServiceInterface) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockMockStorageServiceInterfaceMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).HealthCheck), ctx)
}

// ListFiles mocks base method.
func (m *MockMockStorageServiceInterface) ListFiles(ctx context.Context, bucket, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, bucket, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockMockStorageServiceInterfaceMockRecorder) ListFiles(ctx, bucket, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).ListFiles), ctx, bucket, prefix)
}

// UploadFile mocks base method.
func (m *MockMockStorageServiceInterface) UploadFile(ctx context.Context, bucket, path string, data io.Reader, contentType string) (*models.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, bucket, path, data, contentType)
	ret0, _ := ret[0].(*models.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockMockStorageServiceInterfaceMockRecorder) UploadFile(ctx, bucket, path, data, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockMockStorageServiceInterface)(nil).UploadFile), ctx, bucket, path, data, contentType)
}

// MockDevelopmentServiceInterface is a mock of DevelopmentServiceInterface interface.
type MockDevelopmentServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDevelopmentServiceInterfaceMockRecorder
}

// MockDevelopmentServiceInterfaceMockRecorder is the mock recorder for MockDevelopmentServiceInterface.
type MockDevelopmentServiceInterfaceMockRecorder struct {
	mock *MockDevelopmentServiceInterface
}

// NewMockDevelopmentServiceInterface creates a new mock instance.
func NewMockDevelopmentServiceInterface(ctrl *gomock.Controller) *MockDevelopmentServiceInterface {
	mock := &MockDevelopmentServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDevelopmentServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevelopmentServiceInterface) EXPECT() *MockDevelopmentServiceInterfaceMockRecorder {
	return m.recorder
}

// ClearCache mocks base method.
func (m *MockDevelopmentServiceInterface) ClearCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) ClearCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).ClearCache), ctx)
}

// GenerateTestFiles mocks base method.
func (m *MockDevelopmentServiceInterface) GenerateTestFiles(ctx context.Context, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTestFiles", ctx, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTestFiles indicates an expected call of GenerateTestFiles.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) GenerateTestFiles(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTestFiles", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).GenerateTestFiles), ctx, count)
}

// GetLogs mocks base method.
func (m *MockDevelopmentServiceInterface) GetLogs(ctx context.Context, level string, limit int) ([]models.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, level, limit)
	ret0, _ := ret[0].([]models.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) GetLogs(ctx, level, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).GetLogs), ctx, level, limit)
}

// GetSystemInfo mocks base method.
func (m *MockDevelopmentServiceInterface) GetSystemInfo(ctx context.Context) (*models.SystemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemInfo", ctx)
	ret0, _ := ret[0].(*models.SystemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemInfo indicates an expected call of GetSystemInfo.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) GetSystemInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemInfo", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).GetSystemInfo), ctx)
}

// ResetDatabase mocks base method.
func (m *MockDevelopmentServiceInterface) ResetDatabase(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDatabase", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetDatabase indicates an expected call of ResetDatabase.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) ResetDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDatabase", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).ResetDatabase), ctx)
}

// SeedTestData mocks base method.
func (m *MockDevelopmentServiceInterface) SeedTestData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedTestData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedTestData indicates an expected call of SeedTestData.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) SeedTestData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedTestData", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).SeedTestData), ctx)
}

// SimulateLoad mocks base method.
func (m *MockDevelopmentServiceInterface) SimulateLoad(ctx context.Context, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateLoad", ctx, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimulateLoad indicates an expected call of SimulateLoad.
func (mr *MockDevelopmentServiceInterfaceMockRecorder) SimulateLoad(ctx, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateLoad", reflect.TypeOf((*MockDevelopmentServiceInterface)(nil).SimulateLoad), ctx, duration)
}

// MockTokenServiceInterface is a mock of TokenServiceInterface interface.
type MockTokenServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceInterfaceMockRecorder
}

// MockTokenServiceInterfaceMockRecorder is the mock recorder for MockTokenServiceInterface.
type MockTokenServiceInterfaceMockRecorder struct {
	mock *MockTokenServiceInterface
}

// NewMockTokenServiceInterface creates a new mock instance.
func NewMockTokenServiceInterface(ctrl *gomock.Controller) *MockTokenServiceInterface {
	mock := &MockTokenServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTokenServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenServiceInterface) EXPECT() *MockTokenServiceInterfaceMockRecorder {
	return m.recorder
}

// GenerateDeleteToken mocks base method.
func (m *MockTokenServiceInterface) GenerateDeleteToken(ctx context.Context, path, userID string, expiration time.Duration) (*models.FileUploadToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDeleteToken", ctx, path, userID, expiration)
	ret0, _ := ret[0].(*models.FileUploadToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDeleteToken indicates an expected call of GenerateDeleteToken.
func (mr *MockTokenServiceInterfaceMockRecorder) GenerateDeleteToken(ctx, path, userID, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDeleteToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).GenerateDeleteToken), ctx, path, userID, expiration)
}

// GenerateUploadToken mocks base method.
func (m *MockTokenServiceInterface) GenerateUploadToken(ctx context.Context, path, userID string, expiration time.Duration) (*models.FileUploadToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUploadToken", ctx, path, userID, expiration)
	ret0, _ := ret[0].(*models.FileUploadToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUploadToken indicates an expected call of GenerateUploadToken.
func (mr *MockTokenServiceInterfaceMockRecorder) GenerateUploadToken(ctx, path, userID, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUploadToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).GenerateUploadToken), ctx, path, userID, expiration)
}

// ListActiveTokens mocks base method.
func (m *MockTokenServiceInterface) ListActiveTokens(ctx context.Context, userID string) ([]models.FileUploadToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveTokens", ctx, userID)
	ret0, _ := ret[0].([]models.FileUploadToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveTokens indicates an expected call of ListActiveTokens.
func (mr *MockTokenServiceInterfaceMockRecorder) ListActiveTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveTokens", reflect.TypeOf((*MockTokenServiceInterface)(nil).ListActiveTokens), ctx, userID)
}

// RefreshToken mocks base method.
func (m *MockTokenServiceInterface) RefreshToken(ctx context.Context, token string, expiration time.Duration) (*models.FileUploadToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, token, expiration)
	ret0, _ := ret[0].(*models.FileUploadToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockTokenServiceInterfaceMockRecorder) RefreshToken(ctx, token, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).RefreshToken), ctx, token, expiration)
}

// RevokeToken mocks base method.
func (m *MockTokenServiceInterface) RevokeToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockTokenServiceInterfaceMockRecorder) RevokeToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).RevokeToken), ctx, token)
}

// ValidateToken mocks base method.
func (m *MockTokenServiceInterface) ValidateToken(ctx context.Context, token, path string) (*models.FileUploadToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token, path)
	ret0, _ := ret[0].(*models.FileUploadToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenServiceInterfaceMockRecorder) ValidateToken(ctx, token, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).ValidateToken), ctx, token, path)
}

// MockWebhookServiceInterface is a mock of WebhookServiceInterface interface.
type MockWebhookServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookServiceInterfaceMockRecorder
}

// MockWebhookServiceInterfaceMockRecorder is the mock recorder for MockWebhookServiceInterface.
type MockWebhookServiceInterfaceMockRecorder struct {
	mock *MockWebhookServiceInterface
}

// NewMockWebhookServiceInterface creates a new mock instance.
func NewMockWebhookServiceInterface(ctrl *gomock.Controller) *MockWebhookServiceInterface {
	mock := &MockWebhookServiceInterface{ctrl: ctrl}
	mock.recorder = &MockWebhookServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookServiceInterface) EXPECT() *MockWebhookServiceInterfaceMockRecorder {
	return m.recorder
}

// GetWebhookStatus mocks base method.
func (m *MockWebhookServiceInterface) GetWebhookStatus(ctx context.Context, webhookID string) (*models.ProcessingStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookStatus", ctx, webhookID)
	ret0, _ := ret[0].(*models.ProcessingStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookStatus indicates an expected call of GetWebhookStatus.
func (mr *MockWebhookServiceInterfaceMockRecorder) GetWebhookStatus(ctx, webhookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookStatus", reflect.TypeOf((*MockWebhookServiceInterface)(nil).GetWebhookStatus), ctx, webhookID)
}

// ProcessCloudFunctionWebhook mocks base method.
func (m *MockWebhookServiceInterface) ProcessCloudFunctionWebhook(ctx context.Context, payload models.WebhookPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessCloudFunctionWebhook", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessCloudFunctionWebhook indicates an expected call of ProcessCloudFunctionWebhook.
func (mr *MockWebhookServiceInterfaceMockRecorder) ProcessCloudFunctionWebhook(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCloudFunctionWebhook", reflect.TypeOf((*MockWebhookServiceInterface)(nil).ProcessCloudFunctionWebhook), ctx, payload)
}

// ProcessNostrRelayWebhook mocks base method.
func (m *MockWebhookServiceInterface) ProcessNostrRelayWebhook(ctx context.Context, payload models.WebhookPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNostrRelayWebhook", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessNostrRelayWebhook indicates an expected call of ProcessNostrRelayWebhook.
func (mr *MockWebhookServiceInterfaceMockRecorder) ProcessNostrRelayWebhook(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNostrRelayWebhook", reflect.TypeOf((*MockWebhookServiceInterface)(nil).ProcessNostrRelayWebhook), ctx, payload)
}

// ProcessStorageWebhook mocks base method.
func (m *MockWebhookServiceInterface) ProcessStorageWebhook(ctx context.Context, payload models.WebhookPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStorageWebhook", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessStorageWebhook indicates an expected call of ProcessStorageWebhook.
func (mr *MockWebhookServiceInterfaceMockRecorder) ProcessStorageWebhook(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStorageWebhook", reflect.TypeOf((*MockWebhookServiceInterface)(nil).ProcessStorageWebhook), ctx, payload)
}

// RetryFailedWebhooks mocks base method.
func (m *MockWebhookServiceInterface) RetryFailedWebhooks(ctx context.Context, maxRetries int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryFailedWebhooks", ctx, maxRetries)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryFailedWebhooks indicates an expected call of RetryFailedWebhooks.
func (mr *MockWebhookServiceInterfaceMockRecorder) RetryFailedWebhooks(ctx, maxRetries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryFailedWebhooks", reflect.TypeOf((*MockWebhookServiceInterface)(nil).RetryFailedWebhooks), ctx, maxRetries)
}

// ValidateWebhookSignature mocks base method.
func (m *MockWebhookServiceInterface) ValidateWebhookSignature(payload []byte, signature, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWebhookSignature", payload, signature, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateWebhookSignature indicates an expected call of ValidateWebhookSignature.
func (mr *MockWebhookServiceInterfaceMockRecorder) ValidateWebhookSignature(payload, signature, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWebhookSignature", reflect.TypeOf((*MockWebhookServiceInterface)(nil).ValidateWebhookSignature), payload, signature, secret)
}
