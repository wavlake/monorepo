// Code generated by tygo. DO NOT EDIT.

//////////
// source: user.go

/**
 * User represents a user in the system (monorepo format)
 */
export interface User {
  id: string;
  email: string;
  displayName: string;
  profilePic: string;
  nostrPubkey: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * Track represents a music track (monorepo format)
 */
export interface Track {
  id: string;
  title: string;
  artist: string;
  album?: string;
  duration: number /* int */; // in seconds
  audioUrl: string;
  artworkUrl?: string;
  genre?: string;
  priceMsat?: number /* int64 */;
  ownerId: string;
  nostrEventId?: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * APIUser represents a user in the API system
 */
export interface APIUser {
  FirebaseUID: string; // Primary key
  CreatedAt: string;
  UpdatedAt: string;
  ActivePubkeys: string[]; // Denormalized for quick lookup
}
export interface NostrAuth {
  Pubkey: string; // Primary key
  FirebaseUID: string; // Foreign key to User
  Active: boolean;
  CreatedAt: string;
  LastUsedAt: string;
  LinkedAt: string; // When linked to Firebase user
}
/**
 * LinkedPubkeyInfo represents pubkey information in the response
 */
export interface LinkedPubkeyInfo {
  pubkey: string;
  linked_at: string;
  last_used_at?: string;
}
/**
 * CompressionOption represents a user's choice for audio compression
 */
export interface CompressionOption {
  bitrate: number /* int */; // e.g., 128, 256, 320
  format: string; // e.g., "mp3", "aac", "ogg"
  quality: string; // e.g., "low", "medium", "high"
  sample_rate?: number /* int */; // e.g., 44100, 48000
}
/**
 * CompressionVersion represents a generated compressed version
 */
export interface CompressionVersion {
  id: string; // Unique ID for this version
  url: string; // GCS URL
  bitrate: number /* int */; // Actual bitrate
  format: string; // File format
  quality: string; // Quality level
  sample_rate: number /* int */; // Sample rate
  size: number /* int64 */; // File size in bytes
  is_public: boolean; // Whether to include in Nostr event
  created_at: string;
  options: CompressionOption; // Original compression request
}
export interface NostrTrack {
  id: string; // UUID
  firebase_uid: string; // User who uploaded
  pubkey: string; // Nostr pubkey
  original_url: string; // GCS URL for original file
  presigned_url?: string; // Temporary upload URL (not stored)
  extension: string; // File extension
  size?: number /* int64 */; // Original file size in bytes
  duration?: number /* int */; // Duration in seconds
  is_processing: boolean; // Processing status
  compression_versions?: CompressionVersion[]; // All compressed versions
  has_pending_compression: boolean; // Whether compression is queued
  deleted: boolean; // Soft delete flag
  nostr_kind?: number /* int */; // Nostr event kind
  nostr_d_tag?: string; // Nostr d tag
  created_at: string;
  updated_at: string;
  /**
   * Deprecated fields - kept for backward compatibility
   */
  compressed_url?: string; // Legacy compressed file
  is_compressed: boolean; // Legacy compression status
}
/**
 * VersionUpdate represents a request to update compression version visibility
 */
export interface VersionUpdate {
  version_id: string;
  is_public: boolean;
}
export interface LegacyUser {
  id: string;
  name: string;
  lightning_address: string;
  msat_balance: number /* int64 */;
  amp_msat: number /* int */;
  artwork_url: string;
  profile_url: string;
  is_locked: boolean;
  created_at: string;
  updated_at: string;
}
export interface LegacyTrack {
  id: string;
  artist_id: string;
  album_id: string;
  title: string;
  order: number /* int */;
  play_count: number /* int */;
  msat_total: number /* int64 */;
  live_url: string;
  raw_url: string;
  size: number /* int */;
  duration: number /* int */;
  is_processing: boolean;
  is_draft: boolean;
  is_explicit: boolean;
  compressor_error: boolean;
  deleted: boolean;
  lyrics: string;
  created_at: string;
  updated_at: string;
  published_at: string;
}
export interface LegacyArtist {
  id: string;
  user_id: string;
  name: string;
  artwork_url: string;
  artist_url: string;
  bio: string;
  twitter: string;
  instagram: string;
  youtube: string;
  website: string;
  npub: string;
  verified: boolean;
  deleted: boolean;
  msat_total: number /* int64 */;
  created_at: string;
  updated_at: string;
}
export interface LegacyAlbum {
  id: string;
  artist_id: string;
  title: string;
  artwork_url: string;
  description: string;
  genre_id: number /* int */;
  subgenre_id: number /* int */;
  is_draft: boolean;
  is_single: boolean;
  deleted: boolean;
  msat_total: number /* int64 */;
  is_feed_published: boolean;
  published_at: string;
  created_at: string;
  updated_at: string;
}
/**
 * FileUploadToken represents a token for file upload authentication
 */
export interface FileUploadToken {
  token: string;
  expires_at: string;
  path: string;
  user_id: string;
  created_at: string;
}
/**
 * FileMetadata represents metadata about a file
 */
export interface FileMetadata {
  name: string;
  size: number /* int64 */;
  content_type: string;
  bucket: string;
  url?: string;
  metadata?: { [key: string]: string};
  created_at: string;
  updated_at: string;
}
/**
 * BucketInfo represents information about a storage bucket
 */
export interface BucketInfo {
  name: string;
  location: string;
  storage_class: string;
  created_at: string;
}
/**
 * SystemInfo represents system diagnostic information
 */
export interface SystemInfo {
  version: string;
  environment: string;
  uptime: string;
  memory: { [key: string]: string};
  database: { [key: string]: string};
  storage: { [key: string]: string};
  services: { [key: string]: string};
}
/**
 * WebhookPayload represents a webhook payload from Cloud Functions
 */
export interface WebhookPayload {
  type: string; // "storage", "nostr_relay", "cloud_function"
  source: string; // Source of the webhook
  event_type: string; // Type of event
  data: { [key: string]: any}; // Event data
  timestamp: string;
  signature?: string; // HMAC signature for validation
}
/**
 * LogEntry represents a log entry for debugging
 */
export interface LogEntry {
  level: string;
  message: string;
  data?: { [key: string]: any};
  timestamp: string;
  service: string;
}
/**
 * ProcessingStatus represents the status of track processing
 */
export interface ProcessingStatus {
  track_id: string;
  status: string; // "queued", "processing", "completed", "failed"
  progress: number /* int */; // 0-100
  message?: string;
  error?: string;
  started_at?: string;
  completed_at?: string;
}
/**
 * AudioMetadata represents metadata extracted from audio files
 */
export interface AudioMetadata {
  duration: number /* int */; // Duration in seconds
  bitrate: number /* int */; // Bitrate in kbps
  sample_rate: number /* int */; // Sample rate in Hz
  channels: number /* int */; // Number of audio channels
  format: string; // Audio format (mp3, wav, etc.)
  title?: string;
  artist?: string;
  album?: string;
  genre?: string;
  year?: number /* int */;
  track_number?: number /* int */;
  tags?: { [key: string]: string}; // Additional metadata tags
}
