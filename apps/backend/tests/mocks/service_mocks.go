// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/wavlake/monorepo/internal/models"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// GetFirebaseUIDByPubkey mocks base method.
func (m *MockUserServiceInterface) GetFirebaseUIDByPubkey(ctx context.Context, pubkey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirebaseUIDByPubkey", ctx, pubkey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirebaseUIDByPubkey indicates an expected call of GetFirebaseUIDByPubkey.
func (mr *MockUserServiceInterfaceMockRecorder) GetFirebaseUIDByPubkey(ctx, pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirebaseUIDByPubkey", reflect.TypeOf((*MockUserServiceInterface)(nil).GetFirebaseUIDByPubkey), ctx, pubkey)
}

// GetLinkedPubkeys mocks base method.
func (m *MockUserServiceInterface) GetLinkedPubkeys(ctx context.Context, firebaseUID string) ([]models.NostrAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedPubkeys", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.NostrAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedPubkeys indicates an expected call of GetLinkedPubkeys.
func (mr *MockUserServiceInterfaceMockRecorder) GetLinkedPubkeys(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedPubkeys", reflect.TypeOf((*MockUserServiceInterface)(nil).GetLinkedPubkeys), ctx, firebaseUID)
}

// GetUserEmail mocks base method.
func (m *MockUserServiceInterface) GetUserEmail(ctx context.Context, firebaseUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx, firebaseUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserEmail(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserEmail), ctx, firebaseUID)
}

// LinkPubkeyToUser mocks base method.
func (m *MockUserServiceInterface) LinkPubkeyToUser(ctx context.Context, pubkey, firebaseUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkPubkeyToUser", ctx, pubkey, firebaseUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkPubkeyToUser indicates an expected call of LinkPubkeyToUser.
func (mr *MockUserServiceInterfaceMockRecorder) LinkPubkeyToUser(ctx, pubkey, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPubkeyToUser", reflect.TypeOf((*MockUserServiceInterface)(nil).LinkPubkeyToUser), ctx, pubkey, firebaseUID)
}

// UnlinkPubkeyFromUser mocks base method.
func (m *MockUserServiceInterface) UnlinkPubkeyFromUser(ctx context.Context, pubkey, firebaseUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkPubkeyFromUser", ctx, pubkey, firebaseUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkPubkeyFromUser indicates an expected call of UnlinkPubkeyFromUser.
func (mr *MockUserServiceInterfaceMockRecorder) UnlinkPubkeyFromUser(ctx, pubkey, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkPubkeyFromUser", reflect.TypeOf((*MockUserServiceInterface)(nil).UnlinkPubkeyFromUser), ctx, pubkey, firebaseUID)
}

// MockPostgresServiceInterface is a mock of PostgresServiceInterface interface.
type MockPostgresServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresServiceInterfaceMockRecorder
}

// MockPostgresServiceInterfaceMockRecorder is the mock recorder for MockPostgresServiceInterface.
type MockPostgresServiceInterfaceMockRecorder struct {
	mock *MockPostgresServiceInterface
}

// NewMockPostgresServiceInterface creates a new mock instance.
func NewMockPostgresServiceInterface(ctrl *gomock.Controller) *MockPostgresServiceInterface {
	mock := &MockPostgresServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPostgresServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresServiceInterface) EXPECT() *MockPostgresServiceInterfaceMockRecorder {
	return m.recorder
}

// GetTracksByAlbum mocks base method.
func (m *MockPostgresServiceInterface) GetTracksByAlbum(ctx context.Context, albumID string) ([]models.LegacyTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByAlbum", ctx, albumID)
	ret0, _ := ret[0].([]models.LegacyTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByAlbum indicates an expected call of GetTracksByAlbum.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetTracksByAlbum(ctx, albumID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByAlbum", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetTracksByAlbum), ctx, albumID)
}

// GetTracksByArtist mocks base method.
func (m *MockPostgresServiceInterface) GetTracksByArtist(ctx context.Context, artistID string) ([]models.LegacyTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByArtist", ctx, artistID)
	ret0, _ := ret[0].([]models.LegacyTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByArtist indicates an expected call of GetTracksByArtist.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetTracksByArtist(ctx, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByArtist", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetTracksByArtist), ctx, artistID)
}

// GetUserAlbums mocks base method.
func (m *MockPostgresServiceInterface) GetUserAlbums(ctx context.Context, firebaseUID string) ([]models.LegacyAlbum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAlbums", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.LegacyAlbum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAlbums indicates an expected call of GetUserAlbums.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserAlbums(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAlbums", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserAlbums), ctx, firebaseUID)
}

// GetUserArtists mocks base method.
func (m *MockPostgresServiceInterface) GetUserArtists(ctx context.Context, firebaseUID string) ([]models.LegacyArtist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserArtists", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.LegacyArtist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserArtists indicates an expected call of GetUserArtists.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserArtists(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserArtists", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserArtists), ctx, firebaseUID)
}

// GetUserByFirebaseUID mocks base method.
func (m *MockPostgresServiceInterface) GetUserByFirebaseUID(ctx context.Context, firebaseUID string) (*models.LegacyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByFirebaseUID", ctx, firebaseUID)
	ret0, _ := ret[0].(*models.LegacyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByFirebaseUID indicates an expected call of GetUserByFirebaseUID.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserByFirebaseUID(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByFirebaseUID", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserByFirebaseUID), ctx, firebaseUID)
}

// GetUserTracks mocks base method.
func (m *MockPostgresServiceInterface) GetUserTracks(ctx context.Context, firebaseUID string) ([]models.LegacyTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTracks", ctx, firebaseUID)
	ret0, _ := ret[0].([]models.LegacyTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTracks indicates an expected call of GetUserTracks.
func (mr *MockPostgresServiceInterfaceMockRecorder) GetUserTracks(ctx, firebaseUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTracks", reflect.TypeOf((*MockPostgresServiceInterface)(nil).GetUserTracks), ctx, firebaseUID)
}

// MockStorageServiceInterface is a mock of StorageServiceInterface interface.
type MockStorageServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceInterfaceMockRecorder
}

// MockStorageServiceInterfaceMockRecorder is the mock recorder for MockStorageServiceInterface.
type MockStorageServiceInterfaceMockRecorder struct {
	mock *MockStorageServiceInterface
}

// NewMockStorageServiceInterface creates a new mock instance.
func NewMockStorageServiceInterface(ctrl *gomock.Controller) *MockStorageServiceInterface {
	mock := &MockStorageServiceInterface{ctrl: ctrl}
	mock.recorder = &MockStorageServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceInterface) EXPECT() *MockStorageServiceInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageServiceInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageServiceInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageServiceInterface)(nil).Close))
}

// CopyObject mocks base method.
func (m *MockStorageServiceInterface) CopyObject(ctx context.Context, srcObject, dstObject string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObject", ctx, srcObject, dstObject)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockStorageServiceInterfaceMockRecorder) CopyObject(ctx, srcObject, dstObject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockStorageServiceInterface)(nil).CopyObject), ctx, srcObject, dstObject)
}

// DeleteObject mocks base method.
func (m *MockStorageServiceInterface) DeleteObject(ctx context.Context, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockStorageServiceInterfaceMockRecorder) DeleteObject(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorageServiceInterface)(nil).DeleteObject), ctx, objectName)
}

// GeneratePresignedURL mocks base method.
func (m *MockStorageServiceInterface) GeneratePresignedURL(ctx context.Context, objectName string, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedURL", ctx, objectName, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedURL indicates an expected call of GeneratePresignedURL.
func (mr *MockStorageServiceInterfaceMockRecorder) GeneratePresignedURL(ctx, objectName, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedURL", reflect.TypeOf((*MockStorageServiceInterface)(nil).GeneratePresignedURL), ctx, objectName, expiration)
}

// GetBucketName mocks base method.
func (m *MockStorageServiceInterface) GetBucketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBucketName indicates an expected call of GetBucketName.
func (mr *MockStorageServiceInterfaceMockRecorder) GetBucketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketName", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetBucketName))
}

// GetObjectMetadata mocks base method.
func (m *MockStorageServiceInterface) GetObjectMetadata(ctx context.Context, objectName string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectMetadata", ctx, objectName)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectMetadata indicates an expected call of GetObjectMetadata.
func (mr *MockStorageServiceInterfaceMockRecorder) GetObjectMetadata(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectMetadata", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetObjectMetadata), ctx, objectName)
}

// GetObjectReader mocks base method.
func (m *MockStorageServiceInterface) GetObjectReader(ctx context.Context, objectName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectReader", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectReader indicates an expected call of GetObjectReader.
func (mr *MockStorageServiceInterfaceMockRecorder) GetObjectReader(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectReader", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetObjectReader), ctx, objectName)
}

// GetPublicURL mocks base method.
func (m *MockStorageServiceInterface) GetPublicURL(objectName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicURL", objectName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicURL indicates an expected call of GetPublicURL.
func (mr *MockStorageServiceInterfaceMockRecorder) GetPublicURL(objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicURL", reflect.TypeOf((*MockStorageServiceInterface)(nil).GetPublicURL), objectName)
}

// UploadObject mocks base method.
func (m *MockStorageServiceInterface) UploadObject(ctx context.Context, objectName string, data io.Reader, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadObject", ctx, objectName, data, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadObject indicates an expected call of UploadObject.
func (mr *MockStorageServiceInterfaceMockRecorder) UploadObject(ctx, objectName, data, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadObject", reflect.TypeOf((*MockStorageServiceInterface)(nil).UploadObject), ctx, objectName, data, contentType)
}
