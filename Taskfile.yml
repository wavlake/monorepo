# https://taskfile.dev
version: '3'

vars:
  GO_MODULE: github.com/wavlake/monorepo
  FRONTEND_DIR: apps/web
  BACKEND_DIR: apps/api
  SHARED_TYPES_DIR: packages/shared
  DEV_RELAY_DIR: packages/dev-relay
  
dotenv:
  - .env
  - .env.local

# includes:
#   frontend:
#     taskfile: ./apps/web/Taskfile.yml
#     dir: ./apps/web
#   backend:
#     taskfile: ./apps/api/Taskfile.yml
#     dir: ./apps/api

tasks:
  # === Setup & Installation ===
  setup:
    desc: "Initialize the monorepo for development (TDD-ready)"
    cmds:
      - task: install:all
      - task: types:generate
      - task: test:setup
      - "echo 'Monorepo setup complete with TDD environment!'"

  install:all:
    desc: "Install dependencies for all packages"
    cmds:
      - task: install:frontend
      - task: install:backend
      - task: install:relay
      - task: install:testing

  install:frontend:
    desc: "Install frontend dependencies"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm install

  install:backend:
    desc: "Install Go backend dependencies"
    cmds:
      - cd {{.BACKEND_DIR}} && go mod tidy
      - cd {{.BACKEND_DIR}} && go mod download

  install:relay:
    desc: "Install nak for local nostr relay"
    cmds:
      - go install github.com/fiatjaf/nak@latest

  install:testing:
    desc: "Install testing dependencies and tools"
    cmds:
      - go install github.com/golang/mock/mockgen@latest
      - go install github.com/onsi/ginkgo/v2/ginkgo@latest
      - go install gotest.tools/gotestsum@latest
      - cd {{.FRONTEND_DIR}} && npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event

  # === TDD Development Workflow ===
  tdd:
    desc: "Start TDD development workflow (test-watch mode)"
    cmds:
      - task: tdd:parallel

  tdd:parallel:
    desc: "Run TDD workflow for frontend and backend in parallel"
    cmds:
      - |
        trap 'kill $(jobs -p)' EXIT
        task tdd:backend &
        task tdd:frontend &
        wait

  tdd:backend:
    desc: "Start Go TDD workflow with hot reload testing"
    cmds:
      - cd {{.BACKEND_DIR}} && ginkgo watch -r --notify

  tdd:frontend:
    desc: "Start React TDD workflow with Jest watch mode"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run test:watch

  tdd:integration:
    desc: "Run integration tests in watch mode"
    cmds:
      - task: dev:services &
      - sleep 5
      - cd {{.BACKEND_DIR}} && ginkgo watch -r --notify -tags=emulator ./tests/integration

  # === Red-Green-Refactor Helpers ===
  red:
    desc: "RED: Create failing test (prompts for test creation)"
    cmds:
      - "echo 'RED Phase: Write a failing test'"
      - "echo 'Frontend: cd {{.FRONTEND_DIR}} && npm run test:create'"  
      - "echo 'Backend: cd {{.BACKEND_DIR}} && ginkgo generate [package]'"

  green:
    desc: "GREEN: Run tests and implement minimum code to pass"
    cmds:
      - "echo 'GREEN Phase: Implement minimum code to pass'"
      - task: test:unit:fast

  refactor:
    desc: "REFACTOR: Improve code while keeping tests green"
    cmds:
      - "echo 'REFACTOR Phase: Improve code structure'"
      - task: test:unit:fast
      - task: lint
      - "echo 'All tests still passing after refactor'"

  # === Development Commands ===
  dev:
    desc: "Start full development environment (frontend, backend, relay)"
    deps: [types:generate]
    cmds:
      - task: dev:services

  dev:services:
    desc: "Start all development services in parallel"
    cmds:
      - |
        trap 'kill $(jobs -p)' EXIT
        task dev:relay &
        task dev:backend &
        task dev:frontend &
        wait

  dev:tdd:
    desc: "Start development environment with TDD test watchers"
    cmds:
      - |
        trap 'kill $(jobs -p)' EXIT
        task relay:dev &
        task backend:dev &
        task frontend:dev &
        task tdd:backend &
        task tdd:frontend &
        wait

  dev:frontend:
    desc: "Start frontend development server"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run dev

  dev:backend:
    desc: "Start Go backend in development mode"
    cmds:
      - cd {{.BACKEND_DIR}} && go run ./cmd/api

  dev:backend:local:
    desc: "Start Go backend with local development environment"
    cmds:
      - cd {{.BACKEND_DIR}} && DEVELOPMENT=true SKIP_AUTH=true MOCK_STORAGE=true MOCK_STORAGE_PATH=./dev-storage FILE_SERVER_URL=http://localhost:8081 go run ./cmd/api

  dev:fileserver:
    desc: "Start local file server for mock storage"
    cmds:
      - cd {{.BACKEND_DIR}} && STORAGE_PATH=./dev-storage PORT=8081 go run ./cmd/fileserver

  dev:relay:
    desc: "Start local nostr relay using nak"
    cmds:
      - cd {{.DEV_RELAY_DIR}} && nak serve

  dev:docker:
    desc: "Start development environment using Docker Compose"
    cmds:
      - docker-compose up --build

  # === Testing Commands (TDD-Focused) ===
  test:
    desc: "Run complete test suite (unit tests only - integration and e2e require external services)"
    cmds:
      - task: test:unit

  test:unit:
    desc: "Run all unit tests"
    cmds:
      - task: test:unit:frontend
      - task: test:unit:backend

  test:unit:fast:
    desc: "Run unit tests with faster feedback (parallel, no coverage)"
    cmds:
      - |
        task test:unit:backend:fast &
        task test:unit:frontend:fast &
        wait

  test:unit:frontend:
    desc: "Run frontend unit tests with coverage"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run test:coverage -- --run

  test:unit:frontend:fast:
    desc: "Run frontend unit tests (fast mode)"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm test -- --run

  test:unit:backend:
    desc: "Run Go unit tests with coverage"
    cmds:
      - cd {{.BACKEND_DIR}} && mkdir -p tests/coverage
      - cd {{.BACKEND_DIR}} && ginkgo run -r --cover --coverprofile=coverage.out --output-dir=tests/coverage --skip-package=tests/integration

  test:unit:backend:fast:
    desc: "Run Go unit tests (fast mode, no coverage)"
    cmds:
      - cd {{.BACKEND_DIR}} && ginkgo run -r --randomizeAllSpecs --skip-package=tests/integration

  test:integration:
    desc: "Run integration tests"
    cmds:
      - cd {{.BACKEND_DIR}} && ginkgo run -r --tags=emulator ./tests/integration

  test:integration:staging:
    desc: "Run all integration tests against staging environment"
    cmds:
      - |
        cd {{.BACKEND_DIR}}
        echo "Running integration tests against staging..."
        STAGING_URL=https://api-staging-cgi4gylh7q-uc.a.run.app \
        GCP_PROJECT=wavlake-alpha \
        go test -v ./tests/integration -run "TestStaging.*Suite" -timeout 10m

  test:e2e:
    desc: "Run end-to-end tests"
    cmds:
      - task: build:frontend
      - cd {{.FRONTEND_DIR}} && npm run test:e2e

  test:contract:
    desc: "Run API contract tests"
    cmds:
      - cd {{.BACKEND_DIR}} && ginkgo -r -tags=contract ./tests/contract

  # === Safe Commit Workflow ===
  commit:safe:
    desc: "Safe commit workflow: runs unit + integration tests before allowing commit"
    cmds:
      - "echo '🧪 Running unit tests...'"
      - task: test:unit
      - "echo '✅ Unit tests passed!'"
      - "echo '🔗 Running integration tests...'"
      - task: test:integration
      - "echo '✅ Integration tests passed!'"
      - "echo '🎯 All tests passed - ready to commit safely!'"
      - "echo '💡 Now run: git add . && git commit -m \"your message\"'"


  test:setup:
    desc: "Set up testing environment and generate mocks"
    cmds:
      - task: mocks:generate
      - echo "Test database utilities available in tests/setup/db_setup.go"

  # === Mock Generation ===
  mocks:generate:
    desc: "Generate mocks for testing"
    cmds:
      - task: mocks:backend
      - task: mocks:frontend

  mocks:backend:
    desc: "Generate Go mocks using mockgen"
    cmds:
      - cd {{.BACKEND_DIR}} && find . -name "*.go" -type f -exec grep -l "//go:generate mockgen" {} \; | xargs -I {} dirname {} | sort -u | xargs -I {} sh -c 'cd {} && go generate'

  mocks:frontend:
    desc: "Generate frontend mocks and test utilities"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run generate:mocks

  # === Build Commands ===
  build:
    desc: "Build all applications for production"
    cmds:
      - task: build:frontend
      - task: build:backend

  build:frontend:
    desc: "Build React frontend for production"
    deps: [types:generate, test:unit:frontend]
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run build

  build:backend:
    desc: "Build Go backend binary"
    deps: [test:unit:backend]
    cmds:
      - cd {{.BACKEND_DIR}} && go build -o bin/api ./cmd/api

  build:docker:
    desc: "Build Docker images for production"
    cmds:
      - docker build -t wavlake/frontend ./{{.FRONTEND_DIR}}
      - docker build -t wavlake/backend ./{{.BACKEND_DIR}}

  # === Type Generation ===
  types:generate:
    desc: "Generate TypeScript interfaces from Go structs"
    cmds:
      - task: types:clean
      - task: types:go-to-ts
      - task: types:index
      - task: types:nostr
      - "echo 'Types generated successfully'"

  types:clean:
    desc: "Clean generated type files"
    cmds:
      - rm -rf {{.SHARED_TYPES_DIR}}/api/*.ts
      - mkdir -p {{.SHARED_TYPES_DIR}}/api

  types:go-to-ts:
    desc: "Generate TypeScript interfaces from Go structs using tygo"
    cmds:
      - cd {{.BACKEND_DIR}} && tygo generate

  types:index:
    desc: "Generate index.ts file for API types"
    cmds:
      - |
        echo '// Generated API types - auto-generated by tygo
        // Re-exports all types from models and handlers

        // Export all models (data structures)
        export * from "./models";

        // Export all handlers (requests and responses)
        export * from "./handlers";' > {{.SHARED_TYPES_DIR}}/api/index.ts

  types:nostr:
    desc: "Generate/update Nostr event type definitions"
    cmds:
      - "echo 'Nostr event types are manually maintained in {{.SHARED_TYPES_DIR}}/nostr/'"

  types:watch:
    desc: "Watch Go files and regenerate TypeScript types on changes"
    cmds:
      - |
        while true; do
          find {{.BACKEND_DIR}} -name "*.go" -newer {{.SHARED_TYPES_DIR}}/api/.timestamp 2>/dev/null | head -1 | grep -q . && {
            echo 'Go files changed, regenerating types...'
            task types:generate
            touch {{.SHARED_TYPES_DIR}}/api/.timestamp
          }
          sleep 2
        done

  # === Quality & Coverage ===
  coverage:
    desc: "Generate and view test coverage reports"
    cmds:
      - task: coverage:backend
      - task: coverage:frontend

  coverage:backend:
    desc: "Generate Go test coverage report"
    cmds:
      - "cd {{.BACKEND_DIR}} && mkdir -p tests/coverage"
      - "cd {{.BACKEND_DIR}} && ginkgo -r --cover --coverprofile=coverage.out --output-dir=tests/coverage --skip-package=tests/integration"
      - "cd {{.BACKEND_DIR}} && go tool cover -html=tests/coverage/coverage.out -o tests/coverage/coverage.html"
      - "echo 'Backend coverage report: {{.BACKEND_DIR}}/tests/coverage/coverage.html'"

  coverage:frontend:
    desc: "Generate frontend test coverage report"
    cmds:
      - "cd {{.FRONTEND_DIR}} && npm run test:coverage"
      - "echo 'Frontend coverage report: {{.FRONTEND_DIR}}/coverage/lcov-report/index.html'"


  quality:check:
    desc: "Run comprehensive quality checks"
    cmds:
      - task: lint
      - task: test:unit
      - task: coverage
      - "echo 'Quality checks complete'"

  # === Linting & Formatting ===
  lint:
    desc: "Run linters for all applications"
    cmds:
      - task: lint:frontend
      - task: lint:backend

  lint:frontend:
    desc: "Run frontend linting"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run lint

  lint:backend:
    desc: "Run Go linting"
    cmds:
      - cd {{.BACKEND_DIR}} && golangci-lint run

  format:
    desc: "Format code for all applications"
    cmds:
      - task: format:frontend
      - task: format:backend

  format:frontend:
    desc: "Format frontend code"
    cmds:
      - cd {{.FRONTEND_DIR}} && npm run format

  format:backend:
    desc: "Format Go code"
    cmds:
      - cd {{.BACKEND_DIR}} && gofmt -w .
      - cd {{.BACKEND_DIR}} && goimports -w .

  # === Database & Firebase ===
  firebase:emulators:
    desc: "Start Firebase emulators for local development"
    cmds:
      - firebase emulators:start --only firestore,storage,auth

  db:seed:
    desc: "Seed database with test data"
    cmds:
      - cd {{.BACKEND_DIR}} && go run ./cmd/seed

  # === Deployment ===
  deploy:frontend:
    desc: "Deploy frontend to Vercel"
    deps: [build:frontend]
    cmds:
      - cd {{.FRONTEND_DIR}} && vercel --prod

  deploy:backend:
    desc: "Deploy backend to GCP Cloud Run"  
    deps: [build:docker]
    cmds:
      - gcloud run deploy wavlake-api --image wavlake/backend --platform managed

  deploy:staging:
    desc: "Deploy backend to staging environment (api-staging)"
    deps: [test:unit:backend]
    cmds:
      - ./scripts/deploy-staging.sh
      - task: test:integration:staging

  deploy:staging:build:
    desc: "Build and push staging Docker image (via Cloud Build)"
    cmds:
      - |
        PROJECT_ID=${PROJECT_ID:-wavlake-alpha}
        echo "Note: Use 'task deploy:staging' for full build + deploy pipeline."
        echo "Building image directly with Docker..."
        cd {{.BACKEND_DIR}}
        docker build -t staging-local-build .
        echo "✅ Local build complete. For full deployment: task deploy:staging"

  deploy:staging:test:
    desc: "Run integration tests against staging environment"
    cmds:
      - |
        STAGING_URL=${STAGING_URL:-https://api-staging-wavlake-alpha.run.app}
        GCP_PROJECT=${GCP_PROJECT:-wavlake-alpha}
        echo "Testing staging deployment at: $STAGING_URL"
        echo "Project: $GCP_PROJECT"
        
        # Basic connectivity test
        if curl -f -s "$STAGING_URL/heartbeat" > /dev/null; then
          echo "✅ Basic connectivity test passed"
          
          # Run comprehensive integration tests
          cd {{.BACKEND_DIR}}
          STAGING_URL="$STAGING_URL" GCP_PROJECT="$GCP_PROJECT" \
            go test -v ./tests/integration -run TestStagingEnvironmentSuite -timeout 5m
        else
          echo "❌ Staging heartbeat failed - service may not be ready"

  # === Cloud Build Trigger Management ===
  trigger:create:
    desc: "Create Cloud Build trigger for staging auto-deployment"
    cmds:
      - |
        echo "🔗 Creating Cloud Build trigger..."
        echo "📋 Note: Repository must be connected first via GCP Console:"
        echo "   https://console.cloud.google.com/cloud-build/triggers"
        echo ""
        /Users/joshremaley/google-cloud-sdk/bin/gcloud builds triggers create github \
          --repo-name=monorepo \
          --repo-owner=wavlake \
          --branch-pattern="^(main|develop)$" \
          --build-config=apps/api/cloudbuild-staging.yaml \
          --name=staging-auto-deploy \
          --description="Auto-deploy backend to staging on main/develop branch changes" \
          --included-files="apps/api/**" \
          --project=wavlake-alpha

  trigger:list:
    desc: "List Cloud Build triggers"
    cmds:
      - /Users/joshremaley/google-cloud-sdk/bin/gcloud builds triggers list --project=wavlake-alpha

  trigger:delete:
    desc: "Delete staging Cloud Build trigger"
    cmds:
      - /Users/joshremaley/google-cloud-sdk/bin/gcloud builds triggers delete staging-auto-deploy --project=wavlake-alpha

  deploy:
    desc: "Deploy all applications"
    cmds:
      - task: deploy:backend
      - task: deploy:frontend

  # === Utilities ===
  clean:
    desc: "Clean build artifacts and dependencies"
    cmds:
      - rm -rf {{.FRONTEND_DIR}}/dist
      - rm -rf {{.FRONTEND_DIR}}/node_modules
      - rm -rf {{.BACKEND_DIR}}/bin
      - cd {{.BACKEND_DIR}} && go clean -modcache

  logs:backend:
    desc: "View backend logs"
    cmds:
      - gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=wavlake-api" --limit 50

  logs:relay:
    desc: "View local relay logs"
    cmds:
      - tail -f {{.DEV_RELAY_DIR}}/relay.log

  # === Health Checks ===
  health:
    desc: "Check health of all services"
    cmds:
      - curl -f http://localhost:${VITE_PORT:-8080}/ || echo "Frontend not responding"
      - curl -f http://localhost:${BACKEND_PORT:-3000}/heartbeat || echo "Backend not responding"
      - nc -z localhost 10547 && echo "Relay listening on port 10547" || echo "Relay not responding"

  # === Documentation ===
  docs:
    desc: "Generate API documentation"
    cmds:
      - cd {{.BACKEND_DIR}} && swag init -g ./cmd/api/main.go
      - "echo 'API docs generated at {{.BACKEND_DIR}}/docs/'"

  # === Git Hooks ===
  hooks:install:
    desc: "Install git hooks for the monorepo"
    cmds:
      - cp tools/scripts/pre-commit.sh .git/hooks/pre-commit
      - chmod +x .git/hooks/pre-commit
      - "echo 'Git hooks installed'"

  # === Default Task ===
  default:
    desc: "Show available tasks"
    cmds:
      - task --list
