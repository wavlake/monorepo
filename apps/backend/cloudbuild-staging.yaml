# Cloud Build configuration for staging deployment
steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging:${_IMAGE_TAG}',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging:latest',
      '--cache-from', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging:latest',
      '.'
    ]
    dir: 'apps/backend'

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging']

  # Step 3: Deploy to Cloud Run staging service
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'run', 'deploy', 'api-staging',
      '--image', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging:${_IMAGE_TAG}',
      '--region', '${_REGION}',
      '--platform', 'managed',
      '--allow-unauthenticated',
      # Environment variables
      '--set-env-vars', 'GOOGLE_CLOUD_PROJECT=$PROJECT_ID,ENVIRONMENT=staging,GCS_BUCKET_NAME=${_GCS_BUCKET},TEMP_DIR=/tmp,BACKEND_PORT=8080',
      # PostgreSQL connection via VPC and secrets
      '--vpc-connector', 'cloud-sql-postgres',
      '--vpc-egress', 'private-ranges-only',
      '--set-secrets', 'PROD_POSTGRES_CONNECTION_STRING_RO=PROD_POSTGRES_CONNECTION_STRING_RO:latest',
      '--min-instances', '${_MIN_INSTANCES}',
      '--max-instances', '${_MAX_INSTANCES}',
      '--memory', '${_MEMORY}',
      '--cpu', '${_CPU}',
      '--timeout', '${_TIMEOUT}',
      '--concurrency', '${_CONCURRENCY}'
    ]

  # Step 4: Run smoke tests
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe api-staging --platform managed --region ${_REGION} --format 'value(status.url)')
        echo "Testing staging service at: $${SERVICE_URL}"
        curl -f "$${SERVICE_URL}/heartbeat" || exit 1
        echo "Staging smoke test passed!"

  # Step 5: Run integration tests against deployed service
  - name: 'golang:1.24-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd apps/backend
        export STAGING_URL="https://api-staging-cgi4gylh7q-uc.a.run.app"
        export GCP_PROJECT="$PROJECT_ID"
        echo "Running integration tests against: $$STAGING_URL"
        go test -v ./tests/integration -run "TestStaging.*Suite" -timeout 5m

# Substitution variables with defaults
substitutions:
  # Cloud Run configuration
  _REGION: us-central1
  _REPOSITORY: api-repo
  _IMAGE_TAG: 'staging-build'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '5'
  _MEMORY: '1Gi'
  _CPU: '1'
  _TIMEOUT: '300s'
  _CONCURRENCY: '80'
  
  # GCS configuration
  _GCS_BUCKET: wavlake-audio

# Configuration options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'
  
# Build timeout
timeout: '1200s'

# Artifact storage
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging:${_IMAGE_TAG}'  
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/api-staging:latest'

# Tags for organizing builds
tags:
  - 'api-staging'
  - 'staging'
  - '$BRANCH_NAME'