name: Deploy to Staging

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'

env:
  PROJECT_ID: wavlake-alpha
  SERVICE_NAME: api-staging
  REGION: us-central1

jobs:
  deploy-staging:
    name: Deploy Backend to Staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: apps/backend/go.sum

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Run unit tests
      working-directory: apps/backend
      run: |
        go mod download
        go test -v ./... -short

    - name: Deploy to staging via Cloud Build
      run: |
        gcloud builds submit \
          --config=apps/backend/cloudbuild-staging.yaml \
          --project=${{ env.PROJECT_ID }} \
          --timeout=20m

    - name: Get staging service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }} \
          --format="value(status.url)")
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Staging URL: $SERVICE_URL"

    - name: Run integration tests against staging
      working-directory: apps/backend
      env:
        STAGING_URL: ${{ steps.get-url.outputs.service_url }}
        GCP_PROJECT: ${{ env.PROJECT_ID }}
      run: |
        echo "Running integration tests against: $STAGING_URL"
        go test -v ./tests/integration -run "TestStaging.*Suite" -timeout 10m

    - name: Comment PR with staging URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Staging Deployment Successful!**
            
            **Service URL:** ${{ steps.get-url.outputs.service_url }}
            
            **Test endpoints:**
            - Heartbeat: ${{ steps.get-url.outputs.service_url }}/heartbeat
            - Status: ${{ steps.get-url.outputs.service_url }}/dev/status
            
            Integration tests passed ‚úÖ`
          })

  test-staging-health:
    name: Staging Health Check
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
    - name: Health check staging deployment
      run: |
        SERVICE_URL="${{ needs.deploy-staging.outputs.service_url }}"
        if [ -z "$SERVICE_URL" ]; then
          SERVICE_URL="https://api-staging-cgi4gylh7q-uc.a.run.app"
        fi
        
        echo "Testing staging health at: $SERVICE_URL"
        
        # Basic health check
        response=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/heartbeat")
        if [ "$response" = "200" ]; then
          echo "‚úÖ Staging health check passed"
        else
          echo "‚ùå Staging health check failed (HTTP $response)"
          exit 1
        fi